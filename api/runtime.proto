/*===========================================================================*\
 *           MIT License Copyright (c) 2022 Kris Nóva <kris@nivenly.com>     *
 *                                                                           *
 *                ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓                *
 *                ┃   ███╗   ██╗ ██████╗ ██╗   ██╗ █████╗   ┃                *
 *                ┃   ████╗  ██║██╔═████╗██║   ██║██╔══██╗  ┃                *
 *                ┃   ██╔██╗ ██║██║██╔██║██║   ██║███████║  ┃                *
 *                ┃   ██║╚██╗██║████╔╝██║╚██╗ ██╔╝██╔══██║  ┃                *
 *                ┃   ██║ ╚████║╚██████╔╝ ╚████╔╝ ██║  ██║  ┃                *
 *                ┃   ╚═╝  ╚═══╝ ╚═════╝   ╚═══╝  ╚═╝  ╚═╝  ┃                *
 *                ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛                *
 *                                                                           *
 *                       This machine kills fascists.                        *
 *                                                                           *
\*===========================================================================*/

syntax = "proto3";

option go_package = "gen/aurae";

package aurae;

service LocalRuntime {

  // RunProcess is modelled off systemd "ExecStart" which calls fork(2)
  rpc RunProcess(RunProcessRequest) returns (RunProcessResponse) {}

  // GetProcessMeta is used to get the process metadata at or shortly after
  // runtime
  rpc GetProcessMeta(GetProcessMetaRequest) returns (GetProcessMetaResponse) {}
}

service SandboxRuntime {

  // RunContainer
  //
  // RunContainer is modelled after container runtimes leveraging
  // cgroup namespaces which calls clone(2)
  rpc RunContainer(RunContainerRequest) returns (RunContainerResponse) {}

  // RunVirtualMachine
  rpc RunVirtualMachine(RunVirtualMachineRequest)
      returns (RunVirtualMachineResponse) {}
}

message GetProcessMetaRequest { int32 PID = 1; }

message GetProcessMetaResponse {
  int32 PID = 1;
  string Stdout = 8;
  string Stderr = 9;
  int32 Code = 10;
}

message RunProcessRequest {

  // ExecutableCommand is a carry-over of systemd's "ExecStart"
  // field.
  //
  // This is a verbatim translation of a shell command which can
  // be executed by execve(2) and clone(2)/fork(2).
  //
  // Examples:
  //    "bash -c ./mycommand --boops=beeps"
  //    "cat /etc/shadow"
  //    "ENVAR=false ls -lat /etc"
  //
  string ExecutableCommand = 1;

  // User is the string version of the associated OS user.
  // Note: This is NOT the UID/GUID of the user.
  //
  // Examples:
  //    "nova"
  //    "wheel"
  //    "root"
  string User = 2;

  // Description is an arbitrary description of the process.
  // This is modelled after systemd Description.
  string Description = 3;
}

message RunProcessResponse {
  int32 PID = 1; // PID is the ppid() of the process.
  int32 Code = 10;
  string Message = 12;
}

message RunContainerRequest { string Name = 1; }

message RunContainerResponse {
  int32 Code = 10;
  string Message = 12;
}

message RunVirtualMachineRequest { string Name = 1; }

message RunVirtualMachineResponse {
  int32 Code = 10;
  string Message = 12;
}
