// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: rpc/aurae.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuraeFSClient is the client API for AuraeFS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuraeFSClient interface {
	SetRPC(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetResp, error)
	GetRPC(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
}

type auraeFSClient struct {
	cc grpc.ClientConnInterface
}

func NewAuraeFSClient(cc grpc.ClientConnInterface) AuraeFSClient {
	return &auraeFSClient{cc}
}

func (c *auraeFSClient) SetRPC(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetResp, error) {
	out := new(SetResp)
	err := c.cc.Invoke(ctx, "/aurae.AuraeFS/SetRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auraeFSClient) GetRPC(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/aurae.AuraeFS/GetRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuraeFSServer is the server API for AuraeFS service.
// All implementations must embed UnimplementedAuraeFSServer
// for forward compatibility
type AuraeFSServer interface {
	SetRPC(context.Context, *SetReq) (*SetResp, error)
	GetRPC(context.Context, *GetReq) (*GetResp, error)
	mustEmbedUnimplementedAuraeFSServer()
}

// UnimplementedAuraeFSServer must be embedded to have forward compatible implementations.
type UnimplementedAuraeFSServer struct {
}

func (UnimplementedAuraeFSServer) SetRPC(context.Context, *SetReq) (*SetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRPC not implemented")
}
func (UnimplementedAuraeFSServer) GetRPC(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRPC not implemented")
}
func (UnimplementedAuraeFSServer) mustEmbedUnimplementedAuraeFSServer() {}

// UnsafeAuraeFSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuraeFSServer will
// result in compilation errors.
type UnsafeAuraeFSServer interface {
	mustEmbedUnimplementedAuraeFSServer()
}

func RegisterAuraeFSServer(s grpc.ServiceRegistrar, srv AuraeFSServer) {
	s.RegisterService(&AuraeFS_ServiceDesc, srv)
}

func _AuraeFS_SetRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuraeFSServer).SetRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aurae.AuraeFS/SetRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuraeFSServer).SetRPC(ctx, req.(*SetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuraeFS_GetRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuraeFSServer).GetRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aurae.AuraeFS/GetRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuraeFSServer).GetRPC(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuraeFS_ServiceDesc is the grpc.ServiceDesc for AuraeFS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuraeFS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aurae.AuraeFS",
	HandlerType: (*AuraeFSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRPC",
			Handler:    _AuraeFS_SetRPC_Handler,
		},
		{
			MethodName: "GetRPC",
			Handler:    _AuraeFS_GetRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/aurae.proto",
}
