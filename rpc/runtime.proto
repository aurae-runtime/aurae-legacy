/*===========================================================================*\
 *           MIT License Copyright (c) 2022 Kris Nóva <kris@nivenly.com>     *
 *                                                                           *
 *                ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓                *
 *                ┃   ███╗   ██╗ ██████╗ ██╗   ██╗ █████╗   ┃                *
 *                ┃   ████╗  ██║██╔═████╗██║   ██║██╔══██╗  ┃                *
 *                ┃   ██╔██╗ ██║██║██╔██║██║   ██║███████║  ┃                *
 *                ┃   ██║╚██╗██║████╔╝██║╚██╗ ██╔╝██╔══██║  ┃                *
 *                ┃   ██║ ╚████║╚██████╔╝ ╚████╔╝ ██║  ██║  ┃                *
 *                ┃   ╚═╝  ╚═══╝ ╚═════╝   ╚═══╝  ╚═╝  ╚═╝  ┃                *
 *                ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛                *
 *                                                                           *
 *                       This machine kills fascists.                        *
 *                                                                           *
\*===========================================================================*/

syntax = "proto3";

option go_package = "github.com/kris-nova/aurae/rpc";

package aurae;

// Runtime is where the magic happens.
//
// All of the runtime methods that are exposed to the client live here.
//
// Runtime assumes the scope of a single Aurae stack. Runtime methods
// are ways of directly interfacing with runtime processes managed with
// Aurae.
service Runtime {

  // These will mostly likely resemble systemctl

  // rpc Start (StartReq) returns (StartResp) {}
  // rpc Stop (StopReq) returns (StopResp) {}
  rpc Status(StatusReq) returns (StatusResp) {}
  rpc Run(RunReq) returns (RunResp) {}

}

// Common

message Process {
  string name = 1;
  string status = 2;
}

message Connections {
  string listenSocket = 1;
  string listenPeerID = 2;
}

message Peer {
  string peerID = 1;
}

// Run (WIP)

message RunReq {
  string Name = 1;
}

message RunResp {
  int32 Code = 10;
  string Message = 12;
}


// Status (WIP)

message StatusReq {}

message StatusResp {
  string Field = 1; // Ready, NotReady, etc
  map<string, Process> ProcessTable = 2;
  map<string, Peer> Peers = 3;
  int32 Code = 10;
  string Message = 12;
}
